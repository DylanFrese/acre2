name: Release

on:
  push:
    branches:
    - development-build
    - release-build
    - mumble-plugin-linux-release

jobs:
  build:
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: windows-latest
    outputs:
      VERSION: ${{ env.VERSION }}
      SHA_SHORT: ${{ env.SHA_SHORT }}
    steps:
    - name: Checkout the source code
      uses: actions/checkout@v3
    - name: Setup HEMTT
      uses: arma-actions/hemtt@v1
    - name: Setup Binarize
      run: |
        C:\msys64\usr\bin\wget.exe ${{ secrets.TOOLS_URL }} -O acre2_tools.zip -q
        Expand-Archive acre2_tools.zip -DestinationPath ci
        echo "Check Binarize: $(Test-Path .\\ci\\binarize\\binarize_x64.exe)"
        hemtt --version
        echo "Install Binarize dependencies"
        cp .\ci\binarize\X3DAudio1_7.dll,.\ci\binarize\XAPOFX1_5.dll C:\Windows\System32\
        echo "::group::Set Binarize registry path"
        New-Item "HKCU:\\Software\\Bohemia Interactive\\binarize" -Force | New-ItemProperty -Name path -Value "${{ github.workspace }}\ci\binarize"
        echo "::endgroup::"
        $version = Select-String -Path "addons\\main\\script_version.hpp" -Pattern '#define (MAJOR|MINOR|PATCHLVL|BUILD) (\d+)' | ForEach-Object { $_.Matches.Groups[2].Value } | Join-String -Separator "."
        echo "VERSION=$version" >> $env:GITHUB_ENV
        echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $env:GITHUB_ENV
    - name: Test Binarize
      run: |
        echo "::group::Run Binarize without arguments (look for missing DLLs)"
        ./ci/binarize/binarize_x64.exe || true  # binarize exits with 1 if no file given
        echo "::endgroup::"
      shell: bash  # outputs missing dll information
    - name: Build (HEMTT)
      run: |
        echo "ACRE2 v${{ env.VERSION }} (${{ env.SHA_SHORT }})"
        hemtt release --no-archive
    - name: Rename build folder
      run: mv .hemttout/release .hemttout/@acre2
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: acre2
        path: .hemttout/@*
        retention-days: 30

  compile:
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x86, x64]
    env:
      DXSDK_DIR: "${{ github.workspace }}\\ci\\directx-sdk"  # CMake FindDirectX
    steps:
    - name: Checkout the source code
      uses: actions/checkout@v3
    - name: Setup BattlEye and DirectX SDK
      run: |
        C:\msys64\usr\bin\wget.exe ${{ secrets.TOOLS_URL }} -O acre2_tools.zip -q
        Expand-Archive acre2_tools.zip -DestinationPath ci
        echo "Check DirectX SDK: $(Test-Path .\\ci\\directx-sdk\\Include,.\\ci\\directx-sdk\\Lib\\${{ matrix.arch }})"
        echo "DXSDK_DIR: ${{ env.DXSDK_DIR }}"
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.3
    - name: Build Extensions (x86)
      if: matrix.arch == 'x86'
      run: |
        cd extensions\\vcproj
        cmake .. -A Win32
        msbuild ACRE.sln /m '/t:ACRE2Arma\acre;ACRE2Arma\arma2ts;ACRE2\ACRE2Steam;ACRE2\ACRE2Mumble;ACRE2\ACRE2TS;Extras\Wav2B64' /p:Configuration=RelWithDebInfo
    - name: Build Extensions (x64)
      if: matrix.arch == 'x64'
      run: |
        cd extensions\\vcproj64
        cmake .. -A x64
        msbuild ACRE.sln /m '/t:ACRE2Arma\acre;ACRE2Arma\arma2ts;ACRE2\ACRE2Steam;ACRE2\ACRE2Mumble;ACRE2\ACRE2TS' /p:Configuration=RelWithDebInfo
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: acre2-extensions-${{ matrix.arch }}
        path: |
          *.dll
          extras/*.exe
          plugin
          symbols
        retention-days: 30

  compile-linux:
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the source code
      uses: actions/checkout@v2
    - name: Install Packages
      run: |
        sudo apt update
        sudo DEBIAN_FRONTEND=noninteractive apt install -y libfaudio-dev libtbb-dev
    - name: Build Extensions
      run: |
        mkdir -p extensions/build
        cd extensions/build
        cmake -DUSE_64BIT_BUILD=ON ..
        make -j
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: acre2-extensions-linux
        path: |
          plugin
        retention-days: 30
